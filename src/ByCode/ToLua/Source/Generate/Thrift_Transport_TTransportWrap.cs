//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Thrift_Transport_TTransportWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Thrift.Transport.TTransport), typeof(System.Object));
		L.RegFunction("Peek", Peek);
		L.RegFunction("Open", Open);
		L.RegFunction("Close", Close);
		L.RegFunction("Read", Read);
		L.RegFunction("ReadAll", ReadAll);
		L.RegFunction("Write", Write);
		L.RegFunction("Flush", Flush);
		L.RegFunction("BeginFlush", BeginFlush);
		L.RegFunction("EndFlush", EndFlush);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsOpen", get_IsOpen, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Peek(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			bool o = obj.Peek();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			obj.Open();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.ReadAll(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Thrift.Transport.TTransport), typeof(byte[])))
			{
				Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Thrift.Transport.TTransport), typeof(byte[]), typeof(int), typeof(int)))
			{
				Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Thrift.Transport.TTransport.Write");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			obj.Flush();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginFlush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			System.AsyncCallback arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.AsyncCallback)ToLua.CheckObject(L, 2, typeof(System.AsyncCallback));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.AsyncCallback), func) as System.AsyncCallback;
			}

			object arg1 = ToLua.ToVarObject(L, 3);
			System.IAsyncResult o = obj.BeginFlush(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndFlush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject(L, 2, typeof(System.IAsyncResult));
			obj.EndFlush(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)ToLua.CheckObject(L, 1, typeof(Thrift.Transport.TTransport));
			obj.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Thrift.Transport.TTransport obj = (Thrift.Transport.TTransport)o;
			bool ret = obj.IsOpen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsOpen on a nil value" : e.Message);
		}
	}
}

