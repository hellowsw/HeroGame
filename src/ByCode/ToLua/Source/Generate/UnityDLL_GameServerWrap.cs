//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityDLL_GameServerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityDLL.GameServer), typeof(UnityDLL.LYBServerBase));
		L.RegFunction("SetSessionInfo", SetSessionInfo);
		L.RegFunction("Close", Close);
		L.RegFunction("OnConnected", OnConnected);
		L.RegFunction("OnDestory", OnDestory);
		L.RegFunction("RebindServer", RebindServer);
		L.RegFunction("GetOsName", GetOsName);
		L.RegFunction("GetOsVer", GetOsVer);
		L.RegFunction("GetAdudid", GetAdudid);
		L.RegFunction("GetResolution", GetResolution);
		L.RegFunction("LogOut", LogOut);
		L.RegFunction("GetMsgWriteStream", GetMsgWriteStream);
		L.RegFunction("_GetServerTime", _GetServerTime);
		L.RegFunction("_GetPing", _GetPing);
		L.RegFunction("Send_", Send_);
		L.RegFunction("Logout_", Logout_);
		L.RegFunction("CloseSocket", CloseSocket);
		L.RegFunction("IsConnected_", IsConnected_);
		L.RegFunction("New", _CreateUnityDLL_GameServer);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsRebinding", get_IsRebinding, set_IsRebinding);
		L.RegVar("IsLogined", get_IsLogined, set_IsLogined);
		L.RegVar("IsAppShutdown", get_IsAppShutdown, set_IsAppShutdown);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("CheckedId", get_CheckedId, set_CheckedId);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityDLL_GameServer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityDLL.GameServer obj = new UnityDLL.GameServer();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityDLL.GameServer.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSessionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Network.Net.LYBStream arg1 = (Network.Net.LYBStream)ToLua.CheckObject(L, 3, typeof(Network.Net.LYBStream));
			obj.SetSessionInfo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.OnConnected(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.OnDestory(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RebindServer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			Network.Net.LYBStream arg1 = (Network.Net.LYBStream)ToLua.CheckObject(L, 3, typeof(Network.Net.LYBStream));
			bool o = obj.RebindServer(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOsName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			string o = obj.GetOsName();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOsVer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			string o = obj.GetOsVer();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAdudid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			string o = obj.GetAdudid();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResolution(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			string o = obj.GetResolution();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogOut(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.GameServer));
			bool o = obj.LogOut();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMsgWriteStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Network.Net.LYBSerializerIn o = UnityDLL.GameServer.GetMsgWriteStream();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _GetServerTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityDLL.GameServer._GetServerTime();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _GetPing(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityDLL.GameServer._GetPing();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send_(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.LYBSerializerIn arg0 = (Network.Net.LYBSerializerIn)ToLua.CheckObject(L, 1, typeof(Network.Net.LYBSerializerIn));
			bool o = UnityDLL.GameServer.Send_(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Logout_(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityDLL.GameServer.Logout_();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseSocket(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityDLL.GameServer.CloseSocket();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsConnected_(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = UnityDLL.GameServer.IsConnected_();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRebinding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			bool ret = obj.IsRebinding;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsRebinding on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsLogined(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			bool ret = obj.IsLogined;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLogined on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAppShutdown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			bool ret = obj.IsAppShutdown;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAppShutdown on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UnityDLL.GameServer.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CheckedId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			uint ret = obj.CheckedId;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CheckedId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsRebinding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsRebinding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsRebinding on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsLogined(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsLogined = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsLogined on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsAppShutdown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsAppShutdown = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsAppShutdown on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CheckedId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.GameServer obj = (UnityDLL.GameServer)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.CheckedId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CheckedId on a nil value" : e.Message);
		}
	}
}

