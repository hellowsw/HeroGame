//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameCommon_InputStateWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameCommon.InputState), typeof(System.Object));
		L.RegFunction("GetMouseX", GetMouseX);
		L.RegFunction("GetMouseY", GetMouseY);
		L.RegFunction("GetTouchDown", GetTouchDown);
		L.RegFunction("GetTouchUp", GetTouchUp);
		L.RegFunction("GetMousePos", GetMousePos);
		L.RegFunction("GetKeyDown", GetKeyDown);
		L.RegFunction("GetKeyUp", GetKeyUp);
		L.RegFunction("IsTouchUI", IsTouchUI);
		L.RegFunction("IsStayUI", IsStayUI);
		L.RegFunction("New", _CreateGameCommon_InputState);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameCommon_InputState(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameCommon.InputState obj = new GameCommon.InputState();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameCommon.InputState.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMouseX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = GameCommon.InputState.GetMouseX();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMouseY(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			float o = GameCommon.InputState.GetMouseY();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTouchDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = GameCommon.InputState.GetTouchDown(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTouchUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = GameCommon.InputState.GetTouchUp();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMousePos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Vector2 o = GameCommon.InputState.GetMousePos();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetKeyDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = GameCommon.InputState.GetKeyDown(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetKeyUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = GameCommon.InputState.GetKeyUp(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsTouchUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = GameCommon.InputState.IsTouchUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsStayUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = GameCommon.InputState.IsStayUI();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

