//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityDLL_AccountServerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityDLL.AccountServer), typeof(UnityDLL.LYBServerBase));
		L.RegFunction("Connect", Connect);
		L.RegFunction("OnConnected", OnConnected);
		L.RegFunction("SetServerInfo", SetServerInfo);
		L.RegFunction("CheckLogin", CheckLogin);
		L.RegFunction("CreatePlayer", CreatePlayer);
		L.RegFunction("RegisterCDKey", RegisterCDKey);
		L.RegFunction("StartLogin", StartLogin);
		L.RegFunction("ResetTryCount", ResetTryCount);
		L.RegFunction("New", _CreateUnityDLL_AccountServer);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("serverID", get_serverID, set_serverID);
		L.RegVar("channelID", get_channelID, set_channelID);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("OnConnectedHandler", UnityDLL_AccountServer_OnConnectedHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityDLL_AccountServer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityDLL.AccountServer obj = new UnityDLL.AccountServer();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityDLL.AccountServer.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityDLL.AccountServer), typeof(UnityDLL.AccountServer.OnConnectedHandler)))
			{
				UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.ToObject(L, 1);
				UnityDLL.AccountServer.OnConnectedHandler arg0 = null;
				LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

				if (funcType2 != LuaTypes.LUA_TFUNCTION)
				{
					 arg0 = (UnityDLL.AccountServer.OnConnectedHandler)ToLua.ToObject(L, 2);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 2);
					arg0 = DelegateFactory.CreateDelegate(typeof(UnityDLL.AccountServer.OnConnectedHandler), func) as UnityDLL.AccountServer.OnConnectedHandler;
				}

				obj.Connect(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityDLL.AccountServer), typeof(string), typeof(ushort), typeof(UnityDLL.AccountServer.OnConnectedHandler)))
			{
				UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				ushort arg1 = (ushort)LuaDLL.lua_tonumber(L, 3);
				UnityDLL.AccountServer.OnConnectedHandler arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (UnityDLL.AccountServer.OnConnectedHandler)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(UnityDLL.AccountServer.OnConnectedHandler), func) as UnityDLL.AccountServer.OnConnectedHandler;
				}

				obj.Connect(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityDLL.AccountServer.Connect");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.AccountServer));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.OnConnected(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetServerInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.AccountServer));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			ushort arg2 = (ushort)LuaDLL.luaL_checknumber(L, 4);
			obj.SetServerInfo(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.AccountServer));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			bool o = obj.CheckLogin(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePlayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.AccountServer));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			bool o = obj.CreatePlayer(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCDKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.AccountServer));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			bool o = obj.RegisterCDKey(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLogin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)ToLua.CheckObject(L, 1, typeof(UnityDLL.AccountServer));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.StartLogin(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetTryCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityDLL.AccountServer.ResetTryCount();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)o;
			uint ret = obj.serverID;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_channelID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)o;
			int ret = obj.channelID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index channelID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UnityDLL.AccountServer.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.serverID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_channelID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityDLL.AccountServer obj = (UnityDLL.AccountServer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.channelID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index channelID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityDLL_AccountServer_OnConnectedHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityDLL.AccountServer.OnConnectedHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityDLL.AccountServer.OnConnectedHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

