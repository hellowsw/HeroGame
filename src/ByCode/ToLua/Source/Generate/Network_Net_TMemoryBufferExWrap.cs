//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Network_Net_TMemoryBufferExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Network.Net.TMemoryBufferEx), typeof(Thrift.Transport.TTransport));
		L.RegFunction("Clone", Clone);
		L.RegFunction("Read", Read);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("WriteSByte", WriteSByte);
		L.RegFunction("WriteShort", WriteShort);
		L.RegFunction("WriteUShort", WriteUShort);
		L.RegFunction("WriteInt", WriteInt);
		L.RegFunction("WriteUInt", WriteUInt);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("WriteUInt64", WriteUInt64);
		L.RegFunction("WriteFloat", WriteFloat);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("ReadSByte", ReadSByte);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("ReadShort", ReadShort);
		L.RegFunction("ReadUShort", ReadUShort);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("ReadUInt", ReadUInt);
		L.RegFunction("ReadInt64", ReadInt64);
		L.RegFunction("ReadUInt64", ReadUInt64);
		L.RegFunction("ReadFloat", ReadFloat);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("Reserve", Reserve);
		L.RegFunction("Reset", Reset);
		L.RegFunction("Fill", Fill);
		L.RegFunction("Write", Write);
		L.RegFunction("ReadUntil", ReadUntil);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("WriteStringUtf8", WriteStringUtf8);
		L.RegFunction("WriteStringGBK", WriteStringGBK);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("ReadStringGBK", ReadStringGBK);
		L.RegFunction("ReadStringUtf8", ReadStringUtf8);
		L.RegFunction("ReadChars", ReadChars);
		L.RegFunction("ReadCharsGBK", ReadCharsGBK);
		L.RegFunction("ReadCharsUtf8", ReadCharsUtf8);
		L.RegFunction("GetBuffer", GetBuffer);
		L.RegFunction("ToByteArray", ToByteArray);
		L.RegFunction("Open", Open);
		L.RegFunction("Close", Close);
		L.RegFunction("GetSizeBegin", GetSizeBegin);
		L.RegFunction("GetSizeEnd", GetSizeEnd);
		L.RegFunction("MoveDataToBegin", MoveDataToBegin);
		L.RegFunction("New", _CreateNetwork_Net_TMemoryBufferEx);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnReadPosChange", get_OnReadPosChange, set_OnReadPosChange);
		L.RegVar("OnWritePosChange", get_OnWritePosChange, set_OnWritePosChange);
		L.RegVar("Buff", get_Buff, null);
		L.RegVar("ReadPos", get_ReadPos, set_ReadPos);
		L.RegVar("WritePos", get_WritePos, null);
		L.RegVar("Size", get_Size, null);
		L.RegVar("Capacity", get_Capacity, null);
		L.RegVar("Space", get_Space, null);
		L.RegVar("PreSpace", get_PreSpace, null);
		L.RegVar("IsOpen", get_IsOpen, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetwork_Net_TMemoryBufferEx(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Network.Net.TMemoryBufferEx obj = new Network.Net.TMemoryBufferEx();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				Network.Net.TMemoryBufferEx obj = new Network.Net.TMemoryBufferEx(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(int)))
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				Network.Net.TMemoryBufferEx obj = new Network.Net.TMemoryBufferEx(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(int), typeof(int)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Network.Net.TMemoryBufferEx obj = new Network.Net.TMemoryBufferEx(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Network.Net.TMemoryBufferEx.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			Network.Net.TMemoryBufferEx arg0 = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 2, typeof(Network.Net.TMemoryBufferEx));
			obj.Clone(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Read(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int o = obj.Read(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.WriteBytes(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			sbyte arg0 = (sbyte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteSByte(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUShort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUInt(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteInt64(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.WriteUInt64(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			sbyte o = obj.ReadSByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			short o = obj.ReadShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			ushort o = obj.ReadUShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			uint o = obj.ReadUInt();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			long o = obj.ReadInt64();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			ulong o = obj.ReadUInt64();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reserve(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Reserve(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				obj.Reset();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				Network.Net.TMemoryBufferEx arg0 = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 2);
				obj.Reset(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(byte[]), typeof(int), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Reset(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.Reset");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Fill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Fill(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(byte[])))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.Write(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(byte[]), typeof(int), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.Write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.Write");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUntil(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			Network.Net.TMemoryBufferEx o = obj.ReadUntil(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(string)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.WriteString(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(char[])))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int o = obj.WriteString(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(string), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.WriteString(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(char[]), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.WriteString(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.WriteString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStringUtf8(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(string)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.WriteStringUtf8(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(char[])))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int o = obj.WriteStringUtf8(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(string), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.WriteStringUtf8(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(char[]), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.WriteStringUtf8(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.WriteStringUtf8");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteStringGBK(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(string)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.WriteStringGBK(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(char[])))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int o = obj.WriteStringGBK(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(string), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.WriteStringGBK(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(char[]), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] arg0 = ToLua.CheckCharBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = obj.WriteStringGBK(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.WriteStringGBK");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string o = obj.ReadString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.ReadString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(LuaInterface.LuaOut<int>)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0;
				string o = obj.ReadString(out arg0);
				LuaDLL.lua_pushstring(L, o);
				LuaDLL.lua_pushinteger(L, arg0);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ReadString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadStringGBK(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string o = obj.ReadStringGBK();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.ReadStringGBK(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(LuaInterface.LuaOut<int>)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0;
				string o = obj.ReadStringGBK(out arg0);
				LuaDLL.lua_pushstring(L, o);
				LuaDLL.lua_pushinteger(L, arg0);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ReadStringGBK");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadStringUtf8(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				string o = obj.ReadStringUtf8();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string o = obj.ReadStringUtf8(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(LuaInterface.LuaOut<int>)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0;
				string o = obj.ReadStringUtf8(out arg0);
				LuaDLL.lua_pushstring(L, o);
				LuaDLL.lua_pushinteger(L, arg0);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ReadStringUtf8");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadChars(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] o = obj.ReadChars();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				char[] o = obj.ReadChars(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(LuaInterface.LuaOut<int>)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0;
				char[] o = obj.ReadChars(out arg0);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg0);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ReadChars");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadCharsGBK(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] o = obj.ReadCharsGBK();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				char[] o = obj.ReadCharsGBK(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(LuaInterface.LuaOut<int>)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0;
				char[] o = obj.ReadCharsGBK(out arg0);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg0);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ReadCharsGBK");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadCharsUtf8(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				char[] o = obj.ReadCharsUtf8();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				char[] o = obj.ReadCharsUtf8(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(LuaInterface.LuaOut<int>)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0;
				char[] o = obj.ReadCharsUtf8(out arg0);
				ToLua.Push(L, o);
				LuaDLL.lua_pushinteger(L, arg0);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ReadCharsUtf8");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			byte[] o = obj.GetBuffer();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToByteArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				byte[] o = obj.ToByteArray();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Network.Net.TMemoryBufferEx), typeof(int)))
			{
				Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				byte[] o = obj.ToByteArray(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Network.Net.TMemoryBufferEx.ToByteArray");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			obj.Open();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSizeBegin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			obj.GetSizeBegin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSizeEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			int o = obj.GetSizeEnd();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveDataToBegin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)ToLua.CheckObject(L, 1, typeof(Network.Net.TMemoryBufferEx));
			obj.MoveDataToBegin();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnReadPosChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			System.Action<int> ret = obj.OnReadPosChange;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnReadPosChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnWritePosChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			System.Action<int> ret = obj.OnWritePosChange;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnWritePosChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Buff(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			byte[] ret = obj.Buff;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Buff on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int ret = obj.ReadPos;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReadPos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WritePos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int ret = obj.WritePos;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WritePos on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int ret = obj.Size;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Size on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int ret = obj.Capacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Capacity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Space(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int ret = obj.Space;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Space on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PreSpace(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int ret = obj.PreSpace;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PreSpace on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsOpen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			bool ret = obj.IsOpen;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsOpen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnReadPosChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			System.Action<int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<int>)ToLua.CheckObject(L, 2, typeof(System.Action<int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<int>), func) as System.Action<int>;
			}

			obj.OnReadPosChange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnReadPosChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnWritePosChange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			System.Action<int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<int>)ToLua.CheckObject(L, 2, typeof(System.Action<int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<int>), func) as System.Action<int>;
			}

			obj.OnWritePosChange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index OnWritePosChange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReadPos(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Network.Net.TMemoryBufferEx obj = (Network.Net.TMemoryBufferEx)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReadPos = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReadPos on a nil value" : e.Message);
		}
	}
}

